// <auto-generated />
using System;
using FPetSpaBrazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPetSpaBrazor.Migrations
{
    [DbContext(typeof(FpetSpaBrazorContext))]
    partial class FpetSpaBrazorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Vietnamese_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FPetSpaBrazor.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.BookingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("BookingTime1")
                        .HasColumnType("time")
                        .HasColumnName("BookingTime");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("MaxSlots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BookingTime", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CartID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD79747FAC93A");

                    b.HasIndex(new[] { "UserId" }, "IX_Cart_UserID");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.CartDetail", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CartID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "CartId" }, "IX_CartDetails_CartID");

                    b.HasIndex(new[] { "ProductId" }, "IX_CartDetails_ProductID");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A2B022D7698");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<string>("UserFeedBackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserFeedBackID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_FeedBack_OrderID");

                    b.HasIndex(new[] { "UserFeedBackId" }, "IX_FeedBack_UserFeedBackID");

                    b.ToTable("FeedBack", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("BookingTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("DeliveryOption")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StaffID");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(20, 2)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TransactionID");

                    b.Property<string>("VoucherId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("VoucherID");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BAF71F59845");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Order_CustomerID");

                    b.HasIndex(new[] { "StaffId" }, "IX_Order_StaffID");

                    b.HasIndex(new[] { "TransactionId" }, "IX_Order_TransactionID");

                    b.HasIndex(new[] { "VoucherId" }, "IX_Order_VoucherID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.PaymentMethod", b =>
                {
                    b.Property<int>("MethodId")
                        .HasColumnType("int")
                        .HasColumnName("MethodID");

                    b.Property<string>("MethodApi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MethodAPI");

                    b.Property<string>("MethodName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.HasKey("MethodId")
                        .HasName("PK__PaymentM__FC681FB19861E276");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Pet", b =>
                {
                    b.Property<string>("PetId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PetID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("PetName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Pet Name");

                    b.Property<decimal?>("PetWeight")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("Pet Weight");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("PetId")
                        .HasName("PK__Pet__48E538029A90B6D1");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Pet_CustomerID");

                    b.ToTable("Pet", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.PetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PetType", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ProductID");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CategoryID");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6ED118BD779");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Product_CategoryID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.ProductOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductPicture")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_ProductOrderDetails_OrderID");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductOrderDetails_ProductId");

                    b.ToTable("ProductOrderDetails");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<decimal?>("MinWeight")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__C51BB0EAC4D88B37");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.ServiceOrderDetail", b =>
                {
                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderID");

                    b.Property<string>("PetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PetID");

                    b.Property<decimal?>("PetWeight")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceID");

                    b.HasIndex(new[] { "OrderId" }, "IX_ServiceOrderDetails_OrderID");

                    b.HasIndex(new[] { "PetId" }, "IX_ServiceOrderDetails_PetID");

                    b.HasIndex(new[] { "ServiceId" }, "IX_ServiceOrderDetails_ServiceID");

                    b.ToTable("ServiceOrderDetails");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.StaffStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StaffId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("StaffName")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaffStatus", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TransactionID");

                    b.Property<int?>("MethodId")
                        .HasColumnType("int")
                        .HasColumnName("MethodID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4B99715DB2");

                    b.HasIndex(new[] { "MethodId" }, "IX_Transactions_MethodID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("GmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Voucher", b =>
                {
                    b.Property<string>("VoucherId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("VoucherID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("VoucherId")
                        .HasName("PK__Voucher__3AEE79C1F400B288");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.CartDetail", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_CartDetails.CartID");

                    b.HasOne("FPetSpaBrazor.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_CartDetails.ProductID");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Order", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.Transaction", "Transaction")
                        .WithMany("Orders")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Order.TransactionID");

                    b.HasOne("FPetSpaBrazor.Data.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK_Order.VoucherID");

                    b.Navigation("Transaction");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Product", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product.CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.ProductOrderDetail", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.Order", "Order")
                        .WithMany("ProductOrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ProductOrderDetails.OrderID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.ServiceOrderDetail", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ServiceOrderDetails.OrderID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Transaction", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.PaymentMethod", "Method")
                        .WithMany("Transactions")
                        .HasForeignKey("MethodId")
                        .HasConstraintName("FK_Transactions.MethodID");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPetSpaBrazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FPetSpaBrazor.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Order", b =>
                {
                    b.Navigation("ProductOrderDetails");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Transaction", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FPetSpaBrazor.Data.Voucher", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
